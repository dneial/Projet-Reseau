coloration de graphe au sein d'un réseau de processus interconnectés

1) envoi d'un message indiquant sa couleur (initialement son indice) à chaque voisin.


2)


0 si tu as pas de voisins tu prends la plus petite couleur dispo

1 Sommet de plus haut degré commence (ELECTION)
 -> choisit sa couleur (le 1ere dispo dans le tableau)
 -> envoie à tous ses voisins
    -> voisins reçoivent couleur et la suppriment de leur tableau
 termine

2 prochain sommet recommence algo (ELECTION)
 -> choisit sa couleur (le 1ere dispo dans le tableau )
  -> envoie à tous ses voisins
     -> voisins reçoivent couleur et la suppriment de leur tableau

  > 2 (0) : [0 1 2 3 4 5 6]
    1 (1) : ['0' 1 2 3 4 5 6]
    3 (0) : [0 '1' 2 3 4 5 6]
    4 (1) : ['0' 1 2 3 4 5 6]
    6 (2) : ['0' '1' 2 3 4 5 6]
    5 (1) : ['0' 1 2 3 4 5 6]

    7 (0) : [0 1 2 3 4 5 6]




     1 ------- '2' --------  5
     |          | \         /
     |          |  \       /
     |          |   \     /
     |          |    \   /
     |          |     \ /
     3 -------- 4 ---- 6          7

      1 ------- '2'          5
      |          | \          \
      |          |  \          \
      |          |   \          \
      |          |    \          \
      |          |     \          \
      3 -------- 4  --- 6          7

décrit dans g5:

     1 -------  2
     |          | \
     |          |  \
     |          |   \
     |          |    \
     |          |     \
     3 -------- 4 ---- 5

  > 2 (0) : [0 1 2 3 4 5 6]
    4 (1) : ['0' 1 2 3 4 5 6]
    3 (0) : [0 '1' 2 3 4 5 6]
    1 (1) : ['0' 1 2 3 4 5 6]
    6 : ['0' '1' 2 3 4 5 6]
    5 : ['0' 1 2 3 4 5 6]

    7 : [0 1 2 3 4 5 6]


    idée d'optimisation :
        - cas particuliers
            - graphe complet : n sommets && n(n-1)/2 arêtes  ==> n couleurs, pas besoin de faire tourner l'algorithme
            (on détecte juste si il y a n(n-1)/2 arêtes)

            - graphe étoile : n sommets && n-1 arêtes ==> 2 couleurs, pas besoin de faire tourner l'algorithme

            - graphe cycle : n sommets && n arêtes ==> 2(3) couleurs, pas besoin de faire tourner l'algorithme
            ( attention tester si chaque noeud a bien 1 voisins entrant et 1 voisins sortant )

            - graphe path : n sommets && n-1 arêtes ==> 2 couleurs, pas besoin de faire tourner l'algorithme
            ( attention tester si chaque noeud a bien 1 voisins entrant et/ou 1 voisins sortant )

Valeurs de retour de l'analyse du graphe :

    0 si graphe complet, (n couleurs)
    1 si graphe étoile,  (2 couleurs)
    2 si graphe cycle,   (2 couleurs) (3 si cycle impair)
    3 si graphe chemin,  (2 couleurs) (3 si erreur d'analyse cf return 3)
    4 si graphe aléatoire